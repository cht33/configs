global
// 输出一个表格
function createTable(rows, cols) {
    let ret = "";
    for (let i = 0; i < parseInt(rows) + 2; i++) {
        for (let j = 0; j < parseInt(cols); j++) {
            if (i === 1) {
                ret += "|:---:";
            } else {
                ret += "| <++> ";
            }
        }
        ret += "|\n"
    }
    return ret;
}

endglobal

snippet lm "inline math" wA
$${1}$ $0
endsnippet

snippet dm "display Math" wA
$$
${1}
$$
$0
endsnippet

# =======================
# calculus
# =======================
snippet Com "combination" wAm
C_{${1:n}}^{${2:2}}$2
endsnippet

snippet lim "auto limit" wm
\lim\limits_{${1:n} \to ${2:\infty}} $0
endsnippet

snippet `(?<=\b)sq` "sqrt" wAm
\sqrt{$1}$2
endsnippet

snippet sum "sum" wm
\sum\limits_{${1:i=1}}^{${2:\infty}} $3
endsnippet

snippet int "int" wm
\int_{${1:-\infty}}^{${2:\infty}} $3
endsnippet

snippet intl "int limits" wm
\int\limits_{${1:-\infty}}^{${2:\infty}} $3
endsnippet

snippet prod "prod" wm
\prod\limits_{${1:i=1}}^{${2:\infty}} $3
endsnippet

snippet part "d/dx" wm
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet ppart "d^2/dxdy" wm
\frac{\partial^2 ${1:V}}{\partial ${2:x} \partial ${3:y}} $0
endsnippet

snippet diff "d/dx" wm
\frac{\mathrm{d}${1:y}}{\mathrm{d}${2:x}} $0
endsnippet

snippet iid "independent and identical distribution" iAm
\overset{\text{i.i.d.}}{\sim}
endsnippet

snippet defe "define equal" wAm
\overset{\underset{\mathrm{def}}{}}{=}
endsnippet

snippet buu "bigcup" wA
\bigcup\limits_{${1:i \in ${2:I}}} $0
endsnippet

snippet bnn "bigcap" wA
\bigcap\limits_{${1:i \in ${2:I}}} $0
endsnippet

snippet invs "inverse" wA
^{-1}
endsnippet

priority 10000
snippet `(trans|TRANS)` "inverse" wA
^{T}
endsnippet

snippet mean "Expectation" iAm
\mathbf{E}\left[ $1 \right] $0
endsnippet

snippet cov "Covariance" iAm
\mathrm{Cov}($1)$0
endsnippet

snippet range "i = 1, \cdots, n" wm
${1:i} = ${2:1}, \cdots, ${3:n}$0
endsnippet

snippet in "in" im
\in $0
endsnippet

snippet R+ "R+" im
\mathbb{R}_+
endsnippet

snippet st "s.t." im
s.t.\ $0
endsnippet

snippet aligned "begin aligned" wAm
\begin{aligned}
  $1
\end{aligned} $0
endsnippet

# =======================
# general
# =======================
snippet // "Fraction" iAm
\\frac{$1}{$2}$0
endsnippet

snippet tf "inline Fraction" wAm
\tfrac{$1}{$2}$0
endsnippet

snippet `((\d+)|(\d*)(\\)?([A-Za-z!]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" iAm
\frac{``rv = m[1]``}{$1}$0
endsnippet

priority 200
snippet `(?<=\s)(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|[A-Za-z]{1,2})?(_[A-Za-z0-9]|_\{[^}]+\})?(\^[A-Za-z0-9]|\^\{[^}]+\})?(_[A-Za-z0-9]|_\{[^}]+\})?(\([^)]+\))(_[A-Za-z0-9]|_\{[^}]+\})?(\^[A-Za-z0-9]|\^\{[^}]+\})?(_[A-Za-z0-9]|_\{[^}]+\})?\/` "Fraction with ()" iAm
``rv = "\\frac{" + m.slice(1, m.length).join('') + "}{$1}$2"``
endsnippet

snippet __ "subscript" iAm
_{$1}$0
endsnippet

snippet ** "subscript" iAm
^{$1}$0
endsnippet

snippet ( "auto close ()" iAm
(${1})
endsnippet

snippet { "auto close {}" iAm
{${1}}
endsnippet

snippet [ "auto close []" iAm
[${1}]
endsnippet

# =======================
# subscript
# =======================
snippet `(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|[A-Za-z])(\d)` "auto subscript" wAm
`` rv = m[1] + "_" + m[2]``
endsnippet

priority 100
snippet `(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega|[A-Za-z])_([\dA-Za-z]{2})` "auto subscript" wAm
`` rv = m[1] + "_{" + m[2] + "$1}" ``$2
endsnippet

snippet `\b(?<!\\)([A-Za-z])([a-z])\2` "auto subscript 2" iAm
`` rv = m[1] + "_" + m[2].substring(0, 1) ``
endsnippet

# Custom: Add more greek letters
snippet `(\\mu|\\alpha|\\sigma|\\rho|\\beta|\\gamma|\\delta|\\zeta|\\eta|\\varepsilon|\\theta|\\iota|\\kappa|\\vartheta|\\lambda|\\nu|\\pi|\\rho|\\tau|\\upsilon|\\phi|\\chi|\\psi|\\omega|\\Gamma|\\Delta|\\Theta|\\Lambda|\\Xi|\\Pi|\\Sigma|\\Upsilon|\\Phi|\\Psi|\\Omega)([a-z])\2` "auto subscript for greek letter" iAm
`` rv = m[1] + "_" + m[2].substring(0, 1) ``$1
endsnippet

# =======================
# Font Operation
# =======================

# ==== Static Operation ====
snippet txt "text" iAm
\text{$1}$0
endsnippet

snippet tit "text it" iAm
\textit{$1}$0
endsnippet

snippet mcal "mathcal" im
\mathcal{$1}$0
endsnippet

snippet mbb "mathbb" iAm
\mathbb{$1}$0
endsnippet

snippet mbf "mathbb" iAm
\mathbf{$1}$0
endsnippet

snippet mbm "mathbm" iAm
\bm{$1}$0
endsnippet

# ==== Dynamic Operation ====
priority 100
snippet `(\\?[a-zA-Z]\w*)(bf|BF)` "mathbf" iAm
\mathbf{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)(bm|BM)` "mathbm" iAm
\bm{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)(bs)` "boldsymbol" iAm
\boldsymbol{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)cal` "mathcal" iAm
\mathcal{``rv = m[1].toUpperCase() ``} $0
endsnippet

priority 100
snippet `(?<!\\)\b([a-zA-Z]+)rm` "mathrm" iAm
\mathrm{``rv = m[1]``}
endsnippet

priority 100
snippet `(\\?[a-zA-Z]\w*)mbb` iAm
\mathbb{``rv = m[1]``} $0
endsnippet

# =======================
# Auto Symbol
# =======================
snippet oo "\infty" wAm
\infty
endsnippet

snippet ... "cdots" iAm
\cdots
endsnippet

snippet <> "hokje" iA
\diamond
endsnippet

# +... -> , \cdots
# -  ... -> , \cdots
# add a space if there already is one.
priority 101
snippet `(?<=[-+])\s*\.\.\.` "smart cdots" irA
 \cdots
endsnippet

# It seems that \ldots is only used when , ...,
# ,... -> , \ldots
# ,  ... -> , \ldots
priority 101
snippet `(?<=,)(\s*)\.\.\.` "smart ldots" irA
 \ldots
endsnippet

snippet xx "cross" iAm
\times
endsnippet

snippet eps "epsilon" wAm
\epsilon
endsnippet

snippet `(?<=\b|\d+)(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp|arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|oint|iiint|iint|int|ell|nabla|notin)` "function" wAm
\\``rv = m[1]``
endsnippet

snippet `(?<=\b|\d+)(?<!\\)(mu|alpha|sigma|rho|beta|gamma|delta|zeta|eta|varepsilon|theta|iota|kappa|vartheta|lambda|nu|pi|rho|tau|upsilon|varphi|phi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)` "greek" wAm
\\``rv = m[1]``$0
endsnippet

# ==== Space Symbol ====
snippet `(?<=\b|\d+)(?<!\\)(quad)` "ln" wAm
\\``rv = m[1]``
endsnippet

# ==== Logic Symbol ====
snippet -> "to" iAm
\to
endsnippet

snippet !> "mapsto" iAm
\mapsto
endsnippet

snippet vdash "vdash" iAm
\\vdash
endsnippet

snippet => "implies" iAm
\implies
endsnippet

snippet =< "implied by" iAm
\impliedby
endsnippet

snippet iff "if and only if" iAm
\iff
endsnippet

snippet EE "exist" iAm
\exists
endsnippet]

snippet AA "forall" iAm
\forall
endsnippet

# ==== Compare Symbol ====

snippet -- "setminus" iAm
\setminus
endsnippet

snippet >= "greater than" iAm
\geqslant $0
endsnippet

snippet <= "less than" iAm
\leqslant $0
endsnippet

snippet != "no equals" iAm
\neq
endsnippet

snippet == " constan equals" iAm
\equiv
endsnippet

snippet ~~ " Amppro equals" iAm
\thickapprox
endsnippet

snippet ~= " Amppro equals2" iAm
\cong
endsnippet

snippet >> ">>" iAm
\gg
endsnippet


snippet << "<<" iAm
\ll
endsnippet

# == Auto Adaptive Close ==

snippet ceil "ceil" iAm
\left\lceil $1 \right\rceil $0
endsnippet

snippet floor "floor" iAm
\left\lfloor $1 \right\rfloor$0
endsnippet

priority 100
snippet @( "left( right)" Aim
\left( ${1} \right) $0
endsnippet

priority 100
snippet @| "left| right|" Aim
\left| ${1} \right| $0
endsnippet

priority 100
snippet @{ "left\{ right\}" Aim
\left\\{ ${1} \right\\} $0
endsnippet

priority 100
snippet @[ "left[ right]" Aim
\left[ ${1} \right] $0
endsnippet

priority 100
snippet @< "leftangle rightangle" iAm
\left<${1} \right>$0
endsnippet

priority 200
snippet norm iAm
\left\| ${1} \right\|_{$2}$3
endsnippet

priority 200
snippet abs "absolute value" iAm
\left\vert ${1} \right\vert $0
endsnippet


priority 300
snippet `table(\d)(\d)` "create table with rows and columns" wA
$0``
rv = createTable(m[1], m[2]);
``
endsnippet
